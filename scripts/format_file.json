{
  "results": {
    "mmlu_translated_kk": {
      "acc,none": 0.22956521739130434,
      "acc_stderr,none": 0.012406833947255197,
      "alias": "mmlu_translated_kk"
    },
    "kk_world_history_unt_mc": {
      "acc,none": 0.37819905213270144,
      "acc_stderr,none": 0.01493707640459534,
      "alias": "kk_world_history_unt_mc"
    },
    "kk_human_society_rights_unt_mc": {
      "acc,none": 0.44966442953020136,
      "acc_stderr,none": 0.040890950094508924,
      "alias": "kk_human_society_rights_unt_mc"
    },
    "kk_history_of_kazakhstan_unt_mc": {
      "acc,none": 0.26899128268991285,
      "acc_stderr,none": 0.009036539257204105,
      "alias": "kk_history_of_kazakhstan_unt_mc"
    },
    "kk_geography_unt_mc": {
      "acc,none": 0.34665334665334663,
      "acc_stderr,none": 0.015049412078462849,
      "alias": "kk_geography_unt_mc"
    },
    "kk_english_unt_mc": {
      "acc,none": 0.2969338353953739,
      "acc_stderr,none": 0.010599981030325294,
      "alias": "kk_english_unt_mc"
    },
    "kk_dastur_mc": {
      "acc,none": 0.3026315789473684,
      "acc_stderr,none": 0.01993613656626281,
      "alias": "kk_dastur_mc"
    },
    "kk_constitution_mc": {
      "acc,none": 0.35,
      "acc_stderr,none": 0.03085259867804146,
      "alias": "kk_constitution_mc"
    },
    "kk_biology_unt_mc": {
      "acc,none": 0.25813777441332325,
      "acc_stderr,none": 0.01204482360319207,
      "alias": "kk_biology_unt_mc"
    },
    "kazakh_and_literature_unt_mc": {
      "acc,none": 0.1898696682464455,
      "acc_stderr,none": 0.006751003817297221,
      "alias": "kazakh_and_literature_unt_mc"
    }
  },
  "group_subtasks": {
    "kazakh_and_literature_unt_mc": [],
    "kk_biology_unt_mc": [],
    "kk_constitution_mc": [],
    "kk_dastur_mc": [],
    "kk_english_unt_mc": [],
    "kk_geography_unt_mc": [],
    "kk_history_of_kazakhstan_unt_mc": [],
    "kk_human_society_rights_unt_mc": [],
    "kk_world_history_unt_mc": [],
    "mmlu_translated_kk": []
  },
  "configs": {
    "kazakh_and_literature_unt_mc": {
      "task": "kazakh_and_literature_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "kazakh_and_literature",
      "validation_split": "kazakh_and_literature",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_biology_unt_mc": {
      "task": "kk_biology_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "biology",
      "validation_split": "biology",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_constitution_mc": {
      "task": "kk_constitution_mc",
      "dataset_path": "kz-transformers/kazakh-constitution-mc",
      "training_split": "test",
      "validation_split": "test",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['Correct Answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"Option {s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"Option {gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{Question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_dastur_mc": {
      "task": "kk_dastur_mc",
      "dataset_path": "kz-transformers/kazakh-dastur-mc",
      "training_split": "test",
      "validation_split": "test",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['Correct Answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"Option {s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"Option {gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{Question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_english_unt_mc": {
      "task": "kk_english_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "english",
      "validation_split": "english",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_geography_unt_mc": {
      "task": "kk_geography_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "geography",
      "validation_split": "geography",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_history_of_kazakhstan_unt_mc": {
      "task": "kk_history_of_kazakhstan_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "history_of_kazakhstan",
      "validation_split": "history_of_kazakhstan",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_human_society_rights_unt_mc": {
      "task": "kk_human_society_rights_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "human_society_rights",
      "validation_split": "human_society_rights",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "kk_world_history_unt_mc": {
      "task": "kk_world_history_unt_mc",
      "dataset_path": "kz-transformers/kazakh-unified-national-testing-mc",
      "training_split": "world_history",
      "validation_split": "world_history",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['correct_answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"{s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"{s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"{s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"{s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"{s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"{gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "mmlu_translated_kk": {
      "task": "mmlu_translated_kk",
      "dataset_path": "kz-transformers/mmlu-translated-kk",
      "training_split": "validation",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: Dataset):\n    def _helper(doc,index):\n        field = doc['Correct Answer']\n        fi = None\n        if field == 'answerA' or field in ['A','А']:\n            fi = \"A\"\n        if field == 'answerB' or field in ['B','Б']:\n            fi = \"B\"\n        if field == 'answerC' or field in ['C','С']:\n            fi = \"C\"\n        if field == 'answerD' or field in ['D','Д']:\n            fi = \"D\"\n        if fi:\n            doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n\n        else:\n            for idx,(key,val) in enumerate(list(doc.items())[1:-1]):\n                if field == val:\n                    fi = {0:\"A\",1:\"B\",2:\"C\",3:\"D\"}.get(idx)\n\n\n        doc[\"choices\"] = [doc[f\"Option {s}\"] for s in list('ABCD')]\n        if index == 0:\n            next_doc1 = dataset[index + 1]\n            next_doc2 = dataset[index + 2] if index + 2 < len(dataset) else None\n            doc[\"choices\"].extend([next_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        elif index == len(dataset) - 1:\n            prev_doc1 = dataset[index - 1]\n            prev_doc2 = dataset[index - 2]\n            doc[\"choices\"].extend([prev_doc1[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([prev_doc2[f\"Option {s}\"] for s in list('ABCD')])\n        else:\n            prev_doc = dataset[index - 1]\n            next_doc = dataset[index + 1]\n            doc[\"choices\"].extend([prev_doc[f\"Option {s}\"] for s in list('ABCD')])\n            doc[\"choices\"].extend([next_doc[f\"Option {s}\"] for s in list('ABCD')])\n\n        label_map = {label: i for i, label in enumerate(string.ascii_uppercase[:12])}\n        inv_label_map = {i: label for i, label in enumerate(string.ascii_uppercase[:12])}\n        correct_label = label_map.get(fi)\n        if not correct_label:\n            return {\"label\":\"failed row w/o answer\",\"gold\":\"\"}\n\n        random.shuffle(doc[\"choices\"])\n        gold = fi\n        shuffled_label = doc[\"choices\"].index(doc[f\"Option {gold}\"])\n        doc[\"label\"] = inv_label_map[shuffled_label]\n        doc[\"gold\"] = inv_label_map[shuffled_label]\n\n        return doc\n    ds = dataset.map(_helper,with_indices=True)\n    return ds.filter(lambda x: len(x['gold'])==1)\n",
      "doc_to_text": "{{Question}}\nA. {{choices[0]}}\nB. {{choices[1]}}\nC. {{choices[2]}}\nD. {{choices[3]}}\nE. {{choices[4]}}\nF. {{choices[5]}}\nG. {{choices[6]}}\nH. {{choices[7]}}\nI. {{choices[8]}}\nJ. {{choices[9]}}\nK. {{choices[10]}}\nL. {{choices[11]}}\nЖауап:",
      "doc_to_target": "label",
      "doc_to_choice": [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L"
      ],
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc"
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "kazakh_and_literature_unt_mc": "Yaml",
    "kk_biology_unt_mc": "Yaml",
    "kk_constitution_mc": "Yaml",
    "kk_dastur_mc": "Yaml",
    "kk_english_unt_mc": "Yaml",
    "kk_geography_unt_mc": "Yaml",
    "kk_history_of_kazakhstan_unt_mc": "Yaml",
    "kk_human_society_rights_unt_mc": "Yaml",
    "kk_world_history_unt_mc": "Yaml",
    "mmlu_translated_kk": "Yaml"
  },
  "n-shot": {
    "kazakh_and_literature_unt_mc": 0,
    "kk_biology_unt_mc": 0,
    "kk_constitution_mc": 0,
    "kk_dastur_mc": 0,
    "kk_english_unt_mc": 0,
    "kk_geography_unt_mc": 0,
    "kk_history_of_kazakhstan_unt_mc": 0,
    "kk_human_society_rights_unt_mc": 0,
    "kk_world_history_unt_mc": 0,
    "mmlu_translated_kk": 0
  },
  "n-samples": {
    "mmlu_translated_kk": {
      "original": 1150,
      "effective": 1150
    },
    "kk_world_history_unt_mc": {
      "original": 1055,
      "effective": 1055
    },
    "kk_human_society_rights_unt_mc": {
      "original": 149,
      "effective": 149
    },
    "kk_history_of_kazakhstan_unt_mc": {
      "original": 2409,
      "effective": 2409
    },
    "kk_geography_unt_mc": {
      "original": 1001,
      "effective": 1001
    },
    "kk_english_unt_mc": {
      "original": 1859,
      "effective": 1859
    },
    "kk_dastur_mc": {
      "original": 532,
      "effective": 532
    },
    "kk_constitution_mc": {
      "original": 240,
      "effective": 240
    },
    "kk_biology_unt_mc": {
      "original": 1321,
      "effective": 1321
    },
    "kazakh_and_literature_unt_mc": {
      "original": 3376,
      "effective": 3376
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B-Instruct",
    "model_num_parameters": 8030261248,
    "model_dtype": "torch.bfloat16",
    "model_revision": "main",
    "model_sha": "0e9e39f249a16976918f6564b8830bc894c89659",
    "batch_size": "1",
    "batch_sizes": [],
    "device": "cuda:0",
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": null,
  "date": 1734352265.6746726,
  "pretty_env_info": "PyTorch version: 2.5.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: 14.0.0-1ubuntu1.1\nCMake version: version 3.30.5\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.1.85+-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.2.140\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA A100-SXM4-40GB\nNvidia driver version: 535.104.05\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.6\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        46 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               12\nOn-line CPU(s) list:                  0-11\nVendor ID:                            GenuineIntel\nModel name:                           Intel(R) Xeon(R) CPU @ 2.20GHz\nCPU family:                           6\nModel:                                85\nThread(s) per core:                   2\nCore(s) per socket:                   6\nSocket(s):                            1\nStepping:                             7\nBogoMIPS:                             4400.38\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat avx512_vnni md_clear arch_capabilities\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            192 KiB (6 instances)\nL1i cache:                            192 KiB (6 instances)\nL2 cache:                             6 MiB (6 instances)\nL3 cache:                             38.5 MiB (1 instance)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-11\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Vulnerable\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Vulnerable\nVulnerability Spec rstack overflow:   Not affected\nVulnerability Spec store bypass:      Vulnerable\nVulnerability Spectre v1:             Vulnerable: __user pointer sanitization and usercopy barriers only; no swapgs barriers\nVulnerability Spectre v2:             Vulnerable; IBPB: disabled; STIBP: disabled; PBRSB-eIBRS: Vulnerable; BHI: Vulnerable (Syscall hardening enabled)\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Vulnerable\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] optree==0.13.1\n[pip3] torch==2.5.1+cu121\n[pip3] torchaudio==2.5.1+cu121\n[pip3] torchsummary==1.5.1\n[pip3] torchvision==0.20.1+cu121\n[conda] Could not collect",
  "transformers_version": "4.46.3",
  "upper_git_hash": null,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "meta-llama/Llama-3.1-8B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.1-8B-Instruct",
  "start_time": 1465.518727027,
  "end_time": 2624.160495532,
  "total_evaluation_time_seconds": "1158.6417685049998"
}